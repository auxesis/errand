# Code Generated by ZenTest v. 3.2.0
#                 classname: asrt / meth =  ratio%

$:.unshift '..'

require 'test/unit' unless defined? $ZENTEST and $ZENTEST
require 'RRDtool'

class TestRRDtool < Test::Unit::TestCase
  def setup
    @f = 'test.rrd'
    File.delete @f if File.exists? @f
    @r = RRDtool.new @f
  end
  
  def teardown
    File.delete @f if File.exists? @f
    @r = nil
  end
  
  def create_file
    @start = Time.now.to_i - 1
    @step = 300
    @r.create @step, @start, [ "DS:a:GAUGE:#{2*@step}:0:1", 
      "DS:b:GAUGE:#{2*@step}:-10:10",
      "RRA:AVERAGE:0.5:1:300", 
      "RRA:LAST:0.5:1:10" ]
  end
  
  def create_data
    scale = 10
    ts = Time.now.to_i + 1
    while (ts < (@start.to_i + @step*300)) do
      @r.update "a:b", ["#{ts}:#{rand()}:#{Math.sin(ts / @step / 10)}"]
      ts += @step
    end
  end
  
  def test_create
    create_file
    assert File.readable?(@f)    
  end

  def test_dump
    raise NotImplementedError, 'Need to write test_dump'
  end

  def test_fetch
    raise NotImplementedError, 'Need to write test_fetch'
  end

  def test_first
    raise NotImplementedError, 'Need to write test_first'
  end

  def test_graph
    raise NotImplementedError, 'Need to write test_graph'
  end

  def test_info
    create_file
    info = @r.info
    assert_not_nil info
    assert_equal info['filename'], @f
    assert_equal info['step'], @step
  end

  def test_last
    create_file
    create_data
    l = @r.last
    assert_instance_of Bignum, l
    assert l > 0
  end

  def test_resize
    raise NotImplementedError, 'Need to write test_resize'
  end

  def test_restore
    raise NotImplementedError, 'Need to write test_restore'
  end

  def test_rrdname
    r = RRDtool.new 'foo'
    assert_equal r.rrdname, 'foo'
  end

  def test_tune
    raise NotImplementedError, 'Need to write test_tune'
  end

  def test_update
    create_file
    # first, test the simple update case (now)
    @r.update "a:b", ["N:0:0"]
    assert_in_delta Time.now.to_i, @r.last, 1
    # next, create a bunch of data entries
    create_data
    l = @r.last
    @r.update "a:b", ["#{l+1}:0:0", "#{l+2}:1:1"]
    assert_equal @r.last, l+2
  end

  def test_version
    r = RRDtool.new 'foo'
    v = r.version
    assert_instance_of Float, v
    assert_not_nil v
  end

  def test_xport
    raise NotImplementedError, 'Need to write test_xport'
  end
end
